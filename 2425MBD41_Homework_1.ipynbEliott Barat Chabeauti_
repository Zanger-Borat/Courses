{"cells":[{"cell_type":"markdown","metadata":{"id":"o4cz7EM1f2YU"},"source":["# Introduction to Data Analytics Coding (Session 1&2)"]},{"cell_type":"markdown","metadata":{"id":"upVZ9D3DUoyD"},"source":["### 1. Sort the following list in alphabetical order without changing the list itself"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YwV7nd0JU_pj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727939237436,"user_tz":-120,"elapsed":289,"user":{"displayName":"Eliott Barat-Chabeauti","userId":"02250878658224602304"}},"outputId":"0486b042-48b3-4826-e2dd-427a34fafb36"},"outputs":[{"output_type":"stream","name":"stdout","text":["['a', 'b', 'c', 'd', 'e', 'f']\n"]}],"source":["l = ['b', 'c', 'a', 'f', 'd', 'e']\n","\n","# Here l is the list. we use the function sorted() to sort the list in alphabetical order. Then we print the result\n","sorted_l=sorted(l)\n","print(sorted_l)\n","\n"]},{"cell_type":"markdown","metadata":{"id":"KTkoqs68PfWQ"},"source":["### 2. Check if the first and last number of a list is the same"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9QhW6r1gPkzS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727939358266,"user_tz":-120,"elapsed":283,"user":{"displayName":"Eliott Barat-Chabeauti","userId":"02250878658224602304"}},"outputId":"d973b334-d792-4f90-de1f-de771a74cd73"},"outputs":[{"output_type":"stream","name":"stdout","text":["the first number is not equal to the last\n"]}],"source":["l = [75, 65, 35, 75, 30]\n","\n","#Here we check the statement with the function if and then we print our deduction\n","if l[0]==l[-1] is True:\n","  print(\"the first number is equal to the last\")\n","else:\n","  print(\"the first number is not equal to the last\")\n","\n"]},{"cell_type":"markdown","metadata":{"id":"roYyLKgWgp6m"},"source":["### 3. List the numbers divisible by 5 from a list"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IPB4qP0rfvql","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727940509882,"user_tz":-120,"elapsed":257,"user":{"displayName":"Eliott Barat-Chabeauti","userId":"02250878658224602304"}},"outputId":"8b5a233c-e060-40e6-f7bc-60c4bc206cac"},"outputs":[{"output_type":"stream","name":"stdout","text":["10\n","20\n","55\n"]}],"source":["l = [10, 20, 33, 46, 55]\n","for x in l:\n","  if x%5==0:\n","   print(x)\n","#wow"]},{"cell_type":"markdown","metadata":{"id":"wHB2tafeh0ze"},"source":["### 4. Create a new list by picking odd-indexed items from the list l1 and even-indexed items from the list l2"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NlDzMMbtiAUt","colab":{"base_uri":"https://localhost:8080/"},"outputId":"e39da9d3-3495-4b1f-8947-242a2e09c3a9","executionInfo":{"status":"ok","timestamp":1727955484198,"user_tz":-120,"elapsed":6,"user":{"displayName":"Eliott Barat-Chabeauti","userId":"02250878658224602304"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["[3, 9, 15, 21]\n","[4, 8, 12, 16, 20, 24, 28]\n","[[3, 9, 15, 21], [4, 8, 12, 16, 20, 24, 28]]\n","[3, 9, 15, 21, 4, 8, 12, 16, 20, 24, 28]\n"]}],"source":["from typing_extensions import OrderedDict\n","l1_o=[]\n","#This list is here to be filled with the odd number of the list 1\n","l2_e=[]\n","#This list is here to be filled with the even number of the list 2\n","\n","l1 = [3, 6, 9, 12, 15, 18, 21]\n","l2 = [4, 8, 12, 16, 20, 24, 28]\n","for x in l1:\n","  if x%2==1:\n","    l1_o.append(x)\n","print(l1_o) #it is here to check if the loop is working\n","for y in l2:\n","  if y%2==0:\n","    l2_e.append(y)\n","print(l2_e) #it is here to check if the second loop is working\n","nl=l1_o,l2_e\n","print(sorted((nl)))\n","#This is the number solution, it works but build 3 list.\n","\n","#I have a second solution here with slicing\n","l3 = l1[0::2]+l2[0::]\n","print(l3)\n","\n","\n","\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"njuivp7KXlnQ"},"source":["### 5. Use string formatting to get $\\pi$ with 4 decimal places"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PGn9rh7cXvvL","colab":{"base_uri":"https://localhost:8080/","height":36},"executionInfo":{"status":"ok","timestamp":1727942392244,"user_tz":-120,"elapsed":292,"user":{"displayName":"Eliott Barat-Chabeauti","userId":"02250878658224602304"}},"outputId":"acd649d8-e26a-446a-ec8f-80e748280c71"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'3.1416'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":24}],"source":["import numpy\n","from numpy import pi\n","f'{pi:.4f}'\n"]},{"cell_type":"markdown","metadata":{"id":"_YLSZLbpYul3"},"source":["### 6. Generate a list of the characters from a string and convert them into uppercase"]},{"cell_type":"code","source":["s='python'\n","uppercase_list=[char.upper() for char in s]\n","print(uppercase_list)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-yg17bB9kpN5","executionInfo":{"status":"ok","timestamp":1728371688734,"user_tz":-120,"elapsed":273,"user":{"displayName":"Eliott Barat-Chabeauti","userId":"02250878658224602304"}},"outputId":"791b4561-9de5-4f42-f5ba-1606476d8420"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['P', 'Y', 'T', 'H', 'O', 'N']\n"]}]},{"cell_type":"markdown","metadata":{"id":"GQhyRdllRjG3"},"source":["### 7. Create a new dictionary d2 by extracting the specified keys from the given dictionary d"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LvmL30EiRr8O","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728371693261,"user_tz":-120,"elapsed":285,"user":{"displayName":"Eliott Barat-Chabeauti","userId":"02250878658224602304"}},"outputId":"35df423d-33b2-4241-f7e7-013bc807c4e0"},"outputs":[{"output_type":"stream","name":"stdout","text":["{'Kelly': 8000}\n"]}],"source":["d = {\"name\": \"Kelly\",\n","    \"age\": 25,\n","    \"salary\": 8000,\n","    \"city\": \"New york\"}\n","keys = ['name', 'salary']\n","d2 = {d['name']: d['salary']}\n","print(d2)\n","# The dictionnary is extracting the values attached to the keys, am i suppposed to extract the keys : value couple ? or just the value ?\n"]},{"cell_type":"markdown","metadata":{"id":"bXTHGXR3Lesu"},"source":["### 8. List the keys of a dict if its values appear in another list"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TaTsG3I9Lesv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728371712761,"user_tz":-120,"elapsed":293,"user":{"displayName":"Eliott Barat-Chabeauti","userId":"02250878658224602304"}},"outputId":"044d3dc9-9435-497b-970c-e26d919318db"},"outputs":[{"output_type":"stream","name":"stdout","text":["Emma\n","Jason\n"]}],"source":["\n","l = [47, 64, 69, 37, 76, 83, 95, 97]\n","d = {'Jhon': 57, 'Emma': 69, 'Kelly': 86, 'Jason': 97}\n","x = list[d.values(), d.keys()]\n","for key, value in d.items():\n","  if value in l:\n","    print(key)\n","\n","\n","\n","\n","\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"jClsQW0XSZN1"},"source":["### 9. Get a set of elements present in set A or B, but not both\n","\n","(Hint: use symmetric_difference method)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3XqbbFM3Sf7A","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728372095379,"user_tz":-120,"elapsed":285,"user":{"displayName":"Eliott Barat-Chabeauti","userId":"02250878658224602304"}},"outputId":"4a1799b1-f619-4e03-efba-7eef4c35bcd5"},"outputs":[{"output_type":"stream","name":"stdout","text":["{10, 20}\n","{60, 70}\n","{20, 70, 10, 60}\n"]}],"source":["s1 = {10, 20, 30, 40, 50}\n","s2 = {30, 40, 50, 60, 70}\n","s1_f = (s1.difference(s2))\n","s2_f = (s2.difference(s1))\n","print(s1_f)\n","print(s2_f)\n","\n","#Second solution :\n","\n","s3_f= s1.symmetric_difference(s2)\n","print(s3_f)\n"]},{"cell_type":"markdown","metadata":{"id":"O2Z0VUBdLesv"},"source":["### 10. Create a new set in which each element is a pair of the elements from two lists\n","\n","(Hint: use zip function)\n","```\n","# Example:\n","l1 = [1, 2, 3]\n","l2 = [1, 4, 9]\n","# Expected output:\n","{(3, 9), (1, 1), (2, 4)}\n","```\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Z3pdB0OFLesv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728371730523,"user_tz":-120,"elapsed":317,"user":{"displayName":"Eliott Barat-Chabeauti","userId":"02250878658224602304"}},"outputId":"2211b69d-644b-463e-a75a-04fd9413709f"},"outputs":[{"output_type":"stream","name":"stdout","text":["{(7, 49), (2, 4), (4, 16), (8, 64), (6, 36), (3, 9), (5, 25)}\n"]}],"source":["l1 = [2, 3, 4, 5, 6, 7, 8]\n","l2 = [4, 9, 16, 25, 36, 49, 64]\n","l3=set(zip(l1,l2))\n","print(l3)\n","\n"]},{"cell_type":"markdown","metadata":{"id":"KMhwWlRHZw6y"},"source":["### 11. Define a function (func) which connects two strings using the symbol -"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lUfTNMkjZ6ht","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727963508938,"user_tz":-120,"elapsed":291,"user":{"displayName":"Eliott Barat-Chabeauti","userId":"02250878658224602304"}},"outputId":"1f581b6d-d0d8-477e-835e-6721d0f1b9f6"},"outputs":[{"output_type":"stream","name":"stdout","text":["the sentence merged is i like R-python is good\n"]}],"source":["def Sentence_merger(a,b) :\n","  s= a+\"-\"+b #here it is mandatory to use \"\" str can't concatanate with Any apparently\n","  print(\"the sentence merged is\", s)\n","  return s\n","test=Sentence_merger(\"i like R\",\"python is good\")\n","\n"]},{"cell_type":"markdown","metadata":{"id":"CeknD8RQadDr"},"source":["### 12. Define a lambda function (func) to check whether a number is even"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cvEfsTX2ajDE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728321350481,"user_tz":-120,"elapsed":278,"user":{"displayName":"Eliott Barat-Chabeauti","userId":"02250878658224602304"}},"outputId":"fb79f102-6ff6-41f1-cb8e-2a3045edaba0"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":73}],"source":["even_lambda = lambda x: x%2==0\n","even_lambda(16)"]},{"cell_type":"markdown","metadata":{"id":"rfnWqjqiLesv"},"source":["### 13. Write a function (func) to return the input string but with words in reverse order and in lower cases.\n","\n","Example:\n","\n","Input: It is a good question\n","\n","Output: quation good a is it"]},{"cell_type":"code","source":[],"metadata":{"id":"vvMMOAY7rGDR"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8bMNtECiLesv","colab":{"base_uri":"https://localhost:8080/","height":36},"executionInfo":{"status":"ok","timestamp":1728047966680,"user_tz":-120,"elapsed":388,"user":{"displayName":"Eliott Barat-Chabeauti","userId":"02250878658224602304"}},"outputId":"0ec288f0-12eb-4ee1-98fb-b4cae2755008"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'question good a is it'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":29}],"source":["\n","def backward_sentence(a) :\n","  a = a.lower()\n","  a = a.split()\n","  a = a[::-1]\n","  a = \" \".join(a)\n","  return a\n","backward_sentence(\"It is a good question\")\n","\n"]},{"cell_type":"code","source":["type(backward_sentence) #just to check if the criteria are met."],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LTjQHfDC2UCZ","executionInfo":{"status":"ok","timestamp":1727983603939,"user_tz":-120,"elapsed":235,"user":{"displayName":"Eliott Barat-Chabeauti","userId":"02250878658224602304"}},"outputId":"9aedc995-3390-4097-f292-53ba3b6a0d13"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["function"]},"metadata":{},"execution_count":31}]},{"cell_type":"markdown","metadata":{"id":"xL7XqLnnLesw"},"source":["### 14. Write a function (func) to check if a string is palindrome.\n","\n","(A palindrome is a string that reads the same forwards and backwards.)\n","\n","Example:\n","\n","abcdcba is a palindrome\n","\n","abcdefg is not a palindrome"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PPgfm9GZLesw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728048325809,"user_tz":-120,"elapsed":579,"user":{"displayName":"Eliott Barat-Chabeauti","userId":"02250878658224602304"}},"outputId":"b84fb67e-29d2-457a-b8fe-9406680e97c1"},"outputs":[{"output_type":"stream","name":"stdout","text":["kayak is a palindrome\n"]}],"source":["# Please type your code below...\n","def pal_check (a):\n","  list(a[:])\n","  if a==a[::-1] :\n","    print(f'{a} is a palindrome')\n","  else :\n","    print(f'{a} is not a palindrome')\n","\n","\n","\n","pal_check(\"kayak\")\n","\n","# list format into decomposition into order then return\n","\n"]},{"cell_type":"markdown","metadata":{"id":"JoEffsUHLesw"},"source":["### 15. Generate an ndarray from 1 to 10 with step 0.5"]},{"cell_type":"code","source":["l = Np.arange(1,10.5,0.5)\n","print(l)\n","type(l)\n","# This one is a simpler solution."],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pWu2VKK6W72C","executionInfo":{"status":"ok","timestamp":1728059272534,"user_tz":-120,"elapsed":242,"user":{"displayName":"Eliott Barat-Chabeauti","userId":"02250878658224602304"}},"outputId":"1726cda1-2604-4212-a06a-5e30d0d6ecf5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 1.   1.5  2.   2.5  3.   3.5  4.   4.5  5.   5.5  6.   6.5  7.   7.5\n","  8.   8.5  9.   9.5 10. ]\n"]},{"output_type":"execute_result","data":{"text/plain":["numpy.ndarray"]},"metadata":{},"execution_count":31}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"v3JtajWlLesw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728058662160,"user_tz":-120,"elapsed":232,"user":{"displayName":"Eliott Barat-Chabeauti","userId":"02250878658224602304"}},"outputId":"90d45671-a333-4425-8c11-1b8b8c1d9674"},"outputs":[{"output_type":"stream","name":"stdout","text":["[ 1.   1.5  2.   2.5  3.   3.5  4.   4.5  5.   5.5  6.   6.5  7.   7.5\n","  8.   8.5  9.   9.5 10. ]\n"]},{"output_type":"execute_result","data":{"text/plain":["numpy.ndarray"]},"metadata":{},"execution_count":20}],"source":["import numpy as Np\n","l = [1,1.5,2,2.5,3,3.5,4,4.5,5,5.5,6,6.5,7,7.5,8,8.5,9,9.5,10]\n","a = Np.array(l)\n","print (a)\n","# This solution works but is a bit tideous while nparrange exists"]},{"cell_type":"markdown","metadata":{"id":"QpP5xDSCTAj6"},"source":["### 16. Return array of items in the third column and convert it to a list"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZLITOakhTIj9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728059201191,"user_tz":-120,"elapsed":355,"user":{"displayName":"Eliott Barat-Chabeauti","userId":"02250878658224602304"}},"outputId":"4474164a-ae98-4107-8ff9-8f65383daf5c"},"outputs":[{"output_type":"stream","name":"stdout","text":["[33, 66, 99]\n"]},{"output_type":"execute_result","data":{"text/plain":["list"]},"metadata":{},"execution_count":29}],"source":["import numpy as np\n","a = np.array([[11 ,22, 33],\n","              [44, 55, 66],\n","              [77, 88, 99]])\n","a2d = a[:,2]\n","a2d=list(a2d)\n","print(a2d)\n","type(a2d)\n","\n"]},{"cell_type":"markdown","metadata":{"id":"_6mC8TmJTw6u"},"source":["### 17. Generate an (4x5) random ndarray using seed(2022) and sum the elements by column"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rAFU5NLAT8f7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728307892346,"user_tz":-120,"elapsed":322,"user":{"displayName":"Eliott Barat-Chabeauti","userId":"02250878658224602304"}},"outputId":"1a1e62ba-b78b-431c-d91a-4864ac6b0730"},"outputs":[{"output_type":"stream","name":"stdout","text":["[[-5.27899086e-04 -2.74901425e-01 -1.39285562e-01  1.98468616e+00\n","   2.82109326e-01]\n"," [ 7.60808658e-01  3.00981606e-01  5.40297269e-01  3.73497287e-01\n","   3.77813394e-01]\n"," [-9.02131926e-02 -2.30594327e+00  1.14276002e+00 -1.53565429e+00\n","  -8.63752018e-01]\n"," [ 1.01654494e+00  1.03396388e+00 -8.24492228e-01  1.89048564e-02\n","  -3.83343556e-01]]\n","Somme des colonnes :  [ 1.6866125  -1.2458992   0.7192795   0.84143402 -0.58717285]\n"]}],"source":["import numpy as np\n","from numpy.random import seed\n","from numpy.random import normal\n","seed(2022)\n","random_array = normal(size=(4,5))\n","print(random_array)\n","sum_columns=np.sum(random_array,axis=0)\n","print(\"Somme des colonnes : \", sum_columns)"]},{"cell_type":"markdown","metadata":{"id":"ZUWwRwg1Lesw"},"source":["### 18. Stack 2 numpy arrays horizontally\n","\n","(Hint: use hstack method)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"olsjpS6ELesw"},"outputs":[],"source":["a1 = np.array([[1,2,3],\n","               [4,5,6]])\n","\n","a2 = np.array([[7,8,9],\n","               [10,11,12]])\n","\n","a3 = np.hstack((a, b))\n","print(a3)\n"]},{"cell_type":"markdown","metadata":{"id":"gdbulPeSbmGL"},"source":["### 19. Define a function (func) which take in a string and return the string with all punctuations removed\n","\n","Test the function using the following sentence:\n","\n","I'm learning Python! Super excited!"]},{"cell_type":"code","source":["\n","def func (a) :\n","  a = input(\"Please write a sentence :\")\n","  b = [\"!\", \"?\", \".\",\",\", \":\", \";\", \"§\"] #list of forbidden punctuation, to enhance the application we can rely on adding b as a paramter to allow the user to remove the punctutation he wants to.\n","  cleaned_string = ''.join([char for char in a if char not in b])\n","  return cleaned_string\n","func(\"Hi, this is a test !\")"],"metadata":{"id":"e5cZjloQWzYX","colab":{"base_uri":"https://localhost:8080/","height":53},"executionInfo":{"status":"ok","timestamp":1728308501507,"user_tz":-120,"elapsed":4376,"user":{"displayName":"Eliott Barat-Chabeauti","userId":"02250878658224602304"}},"outputId":"6220743a-646a-4a4c-caf4-2ace58f57861"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Please write a sentence :test !\n"]},{"output_type":"execute_result","data":{"text/plain":["'test '"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":15}]},{"cell_type":"markdown","metadata":{"id":"pLwsQXGsLesx"},"source":["### 20. Make a two-player Rock-Paper-Scissors game by defining a function (rock_paper_scissor).\n","\n","R -> Rock\n","\n","P -> Paper\n","\n","S -> Scissor\n","\n","The function takes two inputs and return the winner (\"x\" or \"y\"). If matched, return \"m\".\n","\n","Example:\n","\n","rock_paper_scissor(x='R', y='S') should return 'x'"]},{"cell_type":"code","source":["def RPC(player):\n","    # Introduction of the game\n","    print(\"Game rules: The Program will ask you Rock? Paper? Scissor through an input box and tell if you win or not\")\n","    player = input('Rock (r), Paper (p), Scissor (s): ')\n","    r = \"r\"  # Rock\n","    p = \"p\"  # Paper\n","    s = \"s\"  # Scissor\n","    if player not in [r, p, s]:\n","        print(\"Invalid choice! Please choose 'r', 'p', or 's'.\")\n","        return\n","    import numpy as np\n","    choice = np.random.normal(size=(3, 3))  # Creating a 3x3 normal distribution array\n","    choice_mean = choice.mean()  # Taking the mean of the array\n","    if choice_mean > 1:\n","        robot_choice = r\n","        print(\"\"\"\n","         _______\n","    ---' ____)\n","          (_____)\n","          (_____)\n","          (____)\n","    ---.__(___)\n","        \"\"\")\n","        print(\"Robot chose Rock\")\n","    elif choice_mean < -1:\n","        robot_choice = s\n","        print(\"\"\"\n","          _______\n","    ---' ____)____\n","                ______)\n","              __________)\n","         (________)\n","    ---.__(___)\n","        \"\"\")\n","        print(\"Robot chose Scissor\")\n","    else:\n","        robot_choice = p\n","        print(\"\"\"\n","       _______\n","    ---' ____)____\n","              ______)\n","           __________)\n","              (____)\n","      ---.__ (___)\n","        \"\"\")\n","        print(\"Robot chose Paper\")\n","\n","    # Choosing the winner\n","    if player == robot_choice:\n","        print(\"It's a draw ㄟ( ▔, ▔ )ㄏ\")\n","    elif (player == r and robot_choice == s) or (player == s and robot_choice == p) or (player == p and robot_choice == r):\n","        print(\"You won (┬┬﹏┬┬)\")\n","    else:\n","        print(\"I won (￣y▽￣)╭ Ohohoho.....\")\n","\n","\n","RPC(\"player\")\n","#I Misread the instruction but it took me way to much time to write it, i feel bad to erase it :/\n","\n","#Bonus point maybe ? ^^"],"metadata":{"id":"6FJB-V8RW11m","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728376014701,"user_tz":-120,"elapsed":72628,"user":{"displayName":"Eliott Barat-Chabeauti","userId":"02250878658224602304"}},"outputId":"830da1fd-77aa-4320-c793-ce646777af56"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Game rules: The Program will ask you Rock? Paper? Scissor through an input box and tell if you win or not\n","Rock (r), Paper (p), Scissor (s): p\n","\n","       _______\n","    ---' ____)____\n","              ______)\n","           __________)\n","              (____)\n","      ---.__ (___)\n","        \n","Robot chose Paper\n","It's a draw ㄟ( ▔, ▔ )ㄏ\n"]}]},{"cell_type":"code","source":[" def RPC_2_player () :\n","  x = input(\"Player 1 choose between rock (r),paper(p) and Scissor(s)\")\n","  y = input(\"Player 2 choose between rock (r),paper(p) and Scissor(s)\")\n","  r = \"Rock\"\n","  s = \"Scissor\"\n","  p = \"Paper\"\n","  if (x == 's' and y == 'p') or (x == 'p' and y== 'r') or (x == 'r' and y == 's'):\n","    return(\"X\")\n","  if (x == 'p' and y == 's') or (x =='r' and y== 'p') or (x == 's' and y == 'r'):\n","    return(\"Y\" )\n","  else :\n","    return (\"It is a draw\")\n","RPC_2_player()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":70},"id":"W2rHLozYqih6","executionInfo":{"status":"ok","timestamp":1728320532100,"user_tz":-120,"elapsed":5234,"user":{"displayName":"Eliott Barat-Chabeauti","userId":"02250878658224602304"}},"outputId":"c67a69cd-d602-41e3-db5a-c5b2384df85f"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Player 1 choose between rock (r),paper(p) and Scissor(s)p\n","Player 2 choose between rock (r),paper(p) and Scissor(s)r\n"]},{"output_type":"execute_result","data":{"text/plain":["'Player 1 Won'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":69}]}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3.7.6 ('base')","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.7.6"},"vscode":{"interpreter":{"hash":"40d3a090f54c6569ab1632332b64b2c03c39dcf918b08424e98f38b5ae0af88f"}}},"nbformat":4,"nbformat_minor":0}